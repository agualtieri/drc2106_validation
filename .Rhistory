# Libraries
library(tidyverse)
library(openxlsx)
library(cluster)
library(cleaninginspectoR)
# Sources
source("./R/check_log.R")
source("./R/check_time.R")
source("./R/data_falsification.R")
source("./R/minimum_standards.R")
sheets <- getSheetNames(data)
# Load inputs
data <- "./input/REACH_DRC_Data Cleaning_Initiative Conjointe de Suivi des Marchés_June2021.xlsm"
sheets <- getSheetNames(data)
SheetList <- lapply(sheets, read.xlsx, xlsxFile = data)
library(tidyverse)
library(openxlsx)
library(cluster)
library(cleaninginspectoR)
SheetList <- lapply(sheets, read.xlsx, xlsxFile = data)
data <- "./input/REACH_DRC_Data Cleaning_Initiative Conjointe de Suivi des Marchés_June2021.xlsm"
sheets <- getSheetNames(data)
SheetList <- lapply(sheets, read.xlsx, xlsxFile = data)
# Load inputs
data <- "./input/REACH_DRC_Data Cleaning_Initiative Conjointe de Suivi des Marchés_June2021.xlsx"
sheets <- getSheetNames(data)
SheetList <- lapply(sheets, read.xlsx, xlsxFile = data)
names(SheetList) <- sheets
clean <- SheetList[["Clean Data"]]
log <- SheetList[["Cleaning Log"]]
tool <- read.xlsx("./input/DRC_JMMI_Questionnaire_juin2021.xlsx")
View(tool)
View(clean)
clean <- clean %>% mutate(., index = 1:row(clean))
clean <- clean %>% mutate(., index = 1:row(.))
clean <- clean %>% mutate(., index = 1:nrow(.))
# CleaningInspector
outliers <- inspect_all(clean)
View(outliers)
# CleaningInspector
outliers <- inspect_all(clean) %>% filter(!is.na(index)) %>% left_join(., select(clean, "uuid", "index"), "index")
View(outliers)
names(clean)[names(clean) == "_uuid"] <- "uuid"
names(clean)[names(clean) == "_index"] <- "index"
clean <- clean %>% mutate(., index = 1:nrow(.))
# Rename stuff
names(clean)[names(clean) == "_uuid"] <- "uuid"
names(clean)[names(clean) == "_index"] <- "index"
View(clean)
clean <- SheetList[["Clean Data"]]
clean$_index <- NULL
clean <- clean %>% mutate(., index = 1:nrow(.))
clean$`_index` <- NULL
clean <- clean %>% mutate(., index = 1:nrow(.))
# CleaningInspector
outliers <- inspect_all(clean) %>% filter(!is.na(index)) %>% left_join(., select(clean, "uuid", "index"), "index")
# Rename stuff
names(clean)[names(clean) == "_uuid"] <- "uuid"
# CleaningInspector
outliers <- inspect_all(clean) %>% filter(!is.na(index)) %>% left_join(., select(clean, "uuid", "index"), "index")
View(outliers)
`%nin%` <- Negate(`%in%`)
outliers <- outliers %>% filter(uuid %nin% log$uuid)
View(outliers)
write.xlsx(outliers, paste0("./output/outliers_",Sys.Date(),".xlsx"))
del <- SheetList[["Deletions"]]
# Check deletions
del$_uuid %in% clean$uuid
# Check deletions
del$`_uuid` %in% clean$uuid
View(log)
# Check cleaning log application
q_not_in_log <- log %>% filter(Question %nin% names(clean))
View(q_not_in_log)
log <- log %>% filter(Question %nin% names(clean))
uuid_not_in_log <- log %>% filter(uuid %nin% clean$uuid)
write.xlsx(uuid_not_in_log, paste0("./output/uuid not in log_",Sys.Date(),".xlsx"))
log <- log %>% filter(uuid %nin% clean$uuid)
log <- SheetList[["Cleaning Log"]]
log <- log %>% filter(Question %in% names(clean))
log <- log %>% filter(uuid %in% clean$uuid)
check.log <- check_log(clean, log,variable = "Question",
old_log_var = "Old.Value", new_log_var = "New.Value")
View(check.log)
check.log <- check_log(clean, log,variable = "Question",
old_log_var = "Old.Value", new_log_var = "New.Value") %>% mutate(., check = ifelse(Old.Value == value_extracted, 1, 0))
check.log <- check_log(clean, log,variable = "Question",
old_log_var = "Old.Value", new_log_var = "New.Value") %>%
mutate(., check = ifelse(New.Value == value_extracted, 1, 0))
check.log <- check_log(clean, log,variable = "Question",
old_log_var = "Old.Value", new_log_var = "New.Value") %>%
mutate(., check = ifelse(New.Value == value_extracted, 1, 0)) %>% filter(check == 0)
View(check.log)
write.xlsx(check.log, paste0("./output/log issues_",Sys.Date(),".xlsx"))
View(clean)
# Check minimum standards
min.standards <- minium_standards(clean, group_var = "q0d4_commune", items_vec = ends_with("_prix_final"))
View(min.standards)
# Check minimum standards
min.standards <- minium_standards(clean, group_var = "q0d4_commune", items_vec = ends_with("_prix_final")) %>% filter(n <3)
write.xlsx(min.standards, paste0("./output/minimum standards_",Sys.Date(),".xlsx"))
# Falsification
enum.false <- calculateEnumeratorSimilarity(clean, tool, col_enum = "q0a_enqueteur", col_admin = "q0d4_commune")
View(enum.false)
simil.surv <- calculateDifferences(clean, tool)
View(simil.surv)
simil.surv <- calculateDifferences(clean, tool) %>% filter(number.different.column < 5)
simil.surv <- calculateDifferences(clean, tool) %>% filter(number.different.columns < 5)
write.xlsx(simil.surv, paste0("./output/similar surveys_",Sys.Date(),".xlsx"))
source("./R/item_boxplots.R")
# Check prices
item_boxplots_formatted(clean, "q0a_enqueteur", ends_with("_prix_final"))
# Check prices
item_boxplots_formatted(clean, "q0d4_commune", ends_with("_prix_final"))
View(item_boxplots_formatted)
# Check prices
library(plyr)
item_boxplots_formatted(clean, "q0d4_commune", ends_with("_prix_final"))
# Validation
rm(list = ls())
# Libraries
library(tidyverse)
library(openxlsx)
library(cluster)
library(cleaninginspectoR)
source("./R/check_time.R")
source("./R/data_falsification.R")
# Sources
source("./R/check_log.R")
source("./R/minimum_standards.R")
source("./R/item_boxplots.R")
data <- read.xlsx("./input/rdc_icsm_juillet.xlsx", detectDates = TRUE)
tool <- read.csv("./input/questions.csv", stringsAsFactors = FALSE)
clean <- data
# Rename stuff
names(clean)[names(clean) == "_uuid"] <- "uuid"
clean$`_index` <- NULL
clean <- clean %>% mutate(., index = 1:nrow(.))
`%nin%` <- Negate(`%in%`)
# CleaningInspector
outliers <- inspect_all(clean) %>% filter(!is.na(index)) %>% left_join(., select(clean, "uuid", "index"), "index")
outliers <- outliers %>% filter(uuid %nin% log$uuid)
View(outliers)
# Check minimum standards
min.standards <- minium_standards(clean, group_var = "q0d4_commune", items_vec = ends_with("_prix_final")) %>% filter(n <3)
# Falsification
enum.false <- calculateEnumeratorSimilarity(clean, tool, col_enum = "q0a_enqueteur", col_admin = "q0d4_commune")
View(enum.false)
simil.surv <- calculateDifferences(clean, tool) %>% filter(number.different.columns < 5)
View(simil.surv)
write.xlsx(simil.surv, paste0("./output/similar surveys_",Sys.Date(),".xlsx"))
# Check prices
library(plyr)
item_boxplots_formatted(clean, "q0d4_commune", ends_with("_prix_final"))
# Validation
rm(list = ls())
# Libraries
library(tidyverse)
library(openxlsx)
library(cluster)
library(cleaninginspectoR)
# Sources
source("./R/check_log.R")
source("./R/check_time.R")
source("./R/data_falsification.R")
source("./R/minimum_standards.R")
source("./R/item_boxplots.R")
# Load inputs
data <- "./input/REACH_DRC_Data Cleaning_Initiative Conjointe de Suivi des Marchés_July2021.xlsx"
sheets <- getSheetNames(data)
SheetList <- lapply(sheets, read.xlsx, xlsxFile = data)
names(SheetList) <- sheets
clean <- SheetList[["Clean Data"]]
log <- SheetList[["Cleaning Log"]]
del <- SheetList[["Deletions"]]
# tool <- read.xlsx("./input/DRC_JMMI_Questionnaire_juin2021.xlsx")
tool <- read.csv("./input/questions.csv", stringsAsFactors = FALSE)
# Rename stuff
names(clean)[names(clean) == "_uuid"] <- "uuid"
clean$`_index` <- NULL
clean <- clean %>% mutate(., index = 1:nrow(.))
`%nin%` <- Negate(`%in%`)
# CleaningInspector
outliers <- inspect_all(clean) %>% filter(!is.na(index)) %>% left_join(., select(clean, "uuid", "index"), "index")
View(clean)
# CleaningInspector
outliers <- inspect_all(clean) %>% filter(!is.na(index)) %>% left_join(., select(clean, "uuid", "index"), "index")
# CleaningInspector
outliers <- inspect_all(clean)
View(clean)
library(cleaninginspectoR)
# CleaningInspector
outliers <- inspect_all(clean)
# Check deletions
del$`_uuid` %in% clean$uuid # ok
# Check cleaning log application
q_not_in_log <- log %>% filter(Question %nin% names(clean))
View(q_not_in_log)
log <- log %>% filter(Question %in% names(clean))
uuid_not_in_log <- log %>% filter(uuid %nin% clean$uuid)
View(q_not_in_log)
View(uuid_not_in_log)
View(del)
log <- log %>% filter(uuid %in% clean$uuid)
check.log <- check_log(clean, log,variable = "Question",
old_log_var = "Old.Value", new_log_var = "New.Value") %>%
mutate(., check = ifelse(New.Value == value_extracted, 1, 0)) %>% filter(check == 0)
View(check.log)
write.xlsx(check.log, paste0("./output/log issues_",Sys.Date(),".xlsx"))
# Check minimum standards
min.standards <- minium_standards(clean, group_var = "q0d4_commune", items_vec = ends_with("_prix_final")) %>% filter(n <3)
View(min.standards)
# Falsification
enum.false <- calculateEnumeratorSimilarity(clean, tool, col_enum = "q0a_enqueteur", col_admin = "q0d4_commune")
# Falsification
enum.false <- calculateEnumeratorSimilarity(clean, tool, col_enum = "q0a_enqueteur", col_admin = "q0d4_commune")
simil.surv <- calculateDifferences(clean, tool) %>% filter(number.different.columns < 5)
write.xlsx(simil.surv, paste0("./output/similar surveys_",Sys.Date(),".xlsx"))
# Check prices
library(plyr)
item_boxplots_formatted(clean, "q0d4_commune", ends_with("_prix_final"))
View(clean)
library(plyr)
item_boxplots_formatted(clean, "q0d4_commune", ends_with("_prix_final"))
# Check prices
data <- read.csv("./input/REACH_RDC_Clean Data_ICSM_Juillet 2021_Au20210810.xlsx")
item_boxplots_formatted(data, "q0d4_commune", ends_with("_prix_final"))
View(data)
# Check prices
data <- read.xlsx("./input/REACH_RDC_Clean Data_ICSM_Juillet 2021_Au20210810.xlsx")
library(plyr)
item_boxplots_formatted(data, "q0d4_commune", ends_with("_prix_final"))
View(item_boxplots_formatted)
View(data)
# Validation
rm(list = ls())
# Libraries
library(tidyverse)
library(openxlsx)
library(cluster)
library(cleaninginspectoR)
source("./R/check_time.R")
source("./R/data_falsification.R")
# Sources
source("./R/check_log.R")
source("./R/minimum_standards.R")
source("./R/item_boxplots.R")
# Load inputs
data <- "./input/REACH_DRC_Data Cleaning_Initiative Conjointe de Suivi des Marchés_July2021.xlsx"
sheets <- getSheetNames(data)
# Load inputs
data <- "./input/REACH_DRC_Data Cleaning_Initiative Conjointe de Suivi des Marchés_July2021.xlsx"
sheets <- getSheetNames(data)
SheetList <- lapply(sheets, read.xlsx, xlsxFile = data)
names(SheetList) <- sheets
clean <- SheetList[["Clean Data"]]
log <- SheetList[["Cleaning Log"]]
del <- SheetList[["Deletions"]]
# tool <- read.xlsx("./input/DRC_JMMI_Questionnaire_juin2021.xlsx")
tool <- read.csv("./input/questions.csv", stringsAsFactors = FALSE)
# Rename stuff
names(clean)[names(clean) == "_uuid"] <- "uuid"
clean$`_index` <- NULL
clean <- clean %>% mutate(., index = 1:nrow(.))
`%nin%` <- Negate(`%in%`)
# CleaningInspector
outliers <- inspect_all(clean) %>% filter(!is.na(index)) %>% left_join(., select(clean, "uuid", "index"), "index")
View(outliers)
outliers <- outliers %>% filter(uuid %nin% log$uuid)
write.xlsx(outliers, paste0("./output/outliers_",Sys.Date(),".xlsx"))
# Check deletions
del$`_uuid` %in% clean$uuid # ok
# Check cleaning log application
q_not_in_log <- log %>% filter(Question %nin% names(clean))
log <- log %>% filter(Question %in% names(clean))
View(q_not_in_log)
q_not_in_log$uuid %in% del$`_uuid`
(uuid %nin% clean$uuid)
View(log)
uuid_not_in_log <- log %>% filter(uuid %nin% clean$uuid)
View(uuid_not_in_log)
write.xlsx(uuid_not_in_log, paste0("./output/uuid not in log_",Sys.Date(),".xlsx"))
log <- log %>% filter(uuid %in% clean$uuid)
check.log <- check_log(clean, log,variable = "Question",
old_log_var = "Old.Value", new_log_var = "New.Value") %>%
mutate(., check = ifelse(New.Value == value_extracted, 1, 0)) %>% filter(check == 0)
write.xlsx(check.log, paste0("./output/log issues_",Sys.Date(),".xlsx"))
# Check minimum standards
min.standards <- minium_standards(clean, group_var = "q0d4_commune", items_vec = ends_with("_prix_final")) %>% filter(n <3)
write.xlsx(min.standards, paste0("./output/minimum standards_",Sys.Date(),".xlsx"))
# Falsification
enum.false <- calculateEnumeratorSimilarity(clean, tool, col_enum = "q0a_enqueteur", col_admin = "q0d4_commune")
View(enum.false)
simil.surv <- calculateDifferences(clean, tool) %>% filter(number.different.columns < 5)
write.xlsx(simil.surv, paste0("./output/similar surveys_",Sys.Date(),".xlsx"))
